
@node code, , Top, Top
@comment node-name, next, previous, up
@unnumbered code

@section Introduction 
The task at hand involves validating representations of statically loaded surfaces with variable load values assigned to discrete points. To facilitate analysis, we adopt several simplifications. Firstly, we constrain charges to predefined values according to the following predicate: 
@smallexample 
charge(+++++++).
charge(++++++).
charge(+++++).
charge(++++).
charge(+++).
charge(++).
charge(+).
charge(0).
@end smallexample 
Here, each charge is denoted by the number of '+' symbols, e.g., '++++' signifies a charge of four units. 

Furthermore, we discretize the two-dimensional surface, conceptualizing it as a grid of cells where each cell can hold one of the predefined charge values. An illustrative example of such a surface is: 
@smallexample 

   +++    +++++++    0      +    ++++    0
 +++++++    +++      0      +    ++++    0
   +++       0    +++++++   +     0     ++++
   +++    +++++++    0    ++++    +      0
+++++++      0      +++     +    ++++    0
   +++    +++++++   +++     +     0      +
 +++++++    +++      0      +    ++++    0
@end smallexample 
For representation purposes, we employ a list of lists. The inner lists delineate cells horizontally, while the outer list groups cells by rows, with each element representing a load value. Thus, the above surface is structured as follows: 
@smallexample 

[ [ +++ , +++++++ , 0 , + , ++++ , 0 ],
[ +++++++ , +++ , 0 , + , ++++ , 0 ],
[ +++ , 0 , +++++++ , + , 0 , ++++ ],
[ +++ , +++++++ , 0 , ++++ , + , 0 ],
[ +++++++ , 0 , +++ , + , ++++ , 0 ],
[ +++ , +++++++ , +++ , + , 0 , + ],
[ +++++++ , +++ , 0 , + , ++++ , 0 ] ]
@end smallexample 
Surfaces can have an arbitrary number of cells in both dimensions. 

In order to accomplish this, we define two types of surfaces, both containing load values. We establish @code{basic_surface/1} which must consist of at least one line, with each line containing at least one cell. It is defined by: 
@smallexample 
basic_surface([L]) :-
    my_list(L).
basic_surface([L|S2]) :-
    my_list(L),
    basic_surface(S2).
@end smallexample 
Additionally, we define @code{surface/1} as above but in addition must ensure that all lines possess the same number of cells. It is defined by: 
@smallexample 
surface([L|L2]) :-
    basic_surface([L|L2]),
    my_length(L,Tam),
    surface_acc([L|L2],Tam).
@end smallexample 
As you can see, an auxiliary predicate has been employed, which accepts the size as a term. In each recursion, it verifies the length of the horizontal lines. 
@smallexample 
surface_acc([L],Tam) :-
    my_length(L,Tam).
surface_acc([[H|T]|T2],Acc) :-
    my_length([H|T],NewAcc),
    equal(Acc,NewAcc),
    surface_acc(T2,NewAcc).
@end smallexample 

@subsection Some examples of use: 
@enumerate  
@item Check if a @code{basic_surface/1} is correct: 
@smallexample 


  ?- basic_surface([[+++,+++++++,0,+], 
              [+++++++,+++,0,+,++++], 
              [+++,0], 
              [+++,+++++++,0], 
              [+++++++,0,+++,+,++++], 
              [+++], 
              [+++++++,+++,0]]).

  yes
  ?-
@end smallexample 
@item Check if a @code{surface/1} is correct: 
@smallexample 

  ?- surface([[+++,+++++++,0,+,++++,0], 
              [+++++++,+++,0,+,++++,0], 
              [+++,0,+++++++,+,0,++++], 
              [+++,+++++++,0,++++,+,0], 
              [+++++++,0,+++,+,++++,0], 
              [+++,+++++++,+++,+,0,+], 
              [+++++++,+++,0,+,++++,0]]).

  yes
  ?-
@end smallexample 
@end enumerate 

@section Operations with surfaces 
We define certain operations that can be performed on surfaces.

@subsection h_line(S,N,C) 
@code{C} is the @code{N}th horizontal line of the surface @code{S} 

@code{N} is a natural number in Peano notation.The horizontal lines are represented as lists with load values. To facilitate this objective, an auxiliary predicate has been used, tasked with extracting an element from a list. Specifically, it retrieves a list from within a list of lists.

@subsubsection Examples 
@enumerate  
@item Lines begin from s(0) : 
@smallexample 

h_line([[+,+++,0], 
              [+,+++,0], 
              [++,0,++], 
              [+,+++,0], 
              [++,0,++], 
              [+,+,++], 
              [+,++,0]], 0, L).

no
?-
@end smallexample 
@item Extract 4th horizontal line: 
@smallexample 

h_line([[+,+++,0], 
              [+,+++,0], 
              [++,0,++], 
              [+,+++,0], 
              [++,0,++], 
              [+,+,++], 
              [+,++,0]], s(s(s(s(0)))), L).

L = [+,+++,0] ? 
yes
?-
@end smallexample 
@item Returns position from line given: 
@smallexample 

h_line([[+,+++,0], 
              [+,+++,0], 
              [++,0,++], 
              [+,+++,0], 
              [++,0,++], 
              [+,+,++], 
              [+,++,0]], N, [+,+++,0]).

N = s(0) ? ;
N = s(s(0)) ? ;
N = s(s(s(s(0)))) ? ; 
yes
?-
@end smallexample 
@item Passing non-existing line: 
@smallexample 

h_line([[+,+++,0], 
              [+,+++,0], 
              [++,0,++], 
              [+,+++,0], 
              [++,0,++], 
              [+,+,++], 
              [+,++,0]], N, [++,+++++,++++]).

no
?-
@end smallexample 
@end enumerate 

@subsection v_line(S,N,C) 
@code{C} is the list of the Nth cells of all horizontal lines of the surface @code{S}. 

@code{N} is a natural number in Peano notation. Similarly to the aforementioned predicate, an auxiliary predicate has been used, tasked with extracting an element from a list. Specifically, it retrieves a list from within a list of lists. 
@subsubsection Examples 
@enumerate  
@item Lines begin from s(0) : 
@smallexample 

v_line([[+,+++,0], 
              [+,+++,0], 
              [++,0,++], 
              [+,+++,0], 
              [++,0,++], 
              [+,+,++], 
              [+,++,0]], 0, C).

no
?-
@end smallexample 
@item Extract 2nd vertical line: 
@smallexample 

v_line([[+,+++,0], 
              [+,+++,0], 
              [++,0,++], 
              [+,+++,0], 
              [++,0,++], 
              [+,+,++], 
              [+,++,0]], s(s(0)), C).

C = [+++,+++,0,+++,0,+,++] ? 
yes
?-
@end smallexample 
@item Returns position from line given: 
@smallexample 

v_line([[+,+++,0], 
              [+,+++,0], 
              [++,0,++], 
              [+,+++,0], 
              [++,0,++], 
              [+,+,++], 
              [+,++,0]], N, [0,0,++,0,++,++,0]).

N = s(s(s(0))) ? 
yes
?-
@end smallexample 
@item Passing non-existing line: 
@smallexample 

v_line([[+,+++,0], 
              [+,+++,0], 
              [++,0,++], 
              [+,+++,0], 
              [++,0,++], 
              [+,+,++], 
              [+,++,0]], N, [++,0,+,+++++,++++,++,0]).

no
?-
@end smallexample 
@end enumerate 

@subsection v_lines(S, C) 
@code{C} is the list of vertical lines of cells on the surface @code{S}. 

It utilizes an auxiliary predicate which, during each recursion, extracts the vertical line and concatenates it to the final list. 
@subsubsection Examples 
@enumerate  
@item Extract all vertical lines: 
@smallexample 

v_lines([[+,+++,0], 
              [+,+++,0], 
              [++,0,++], 
              [+,+++,0], 
              [++,0,++], 
              [+,+,++], 
              [+,++,0]], C).

C = [[+,+,++,+,++,+,+],[+++,+++,0,+++,0,+,++],[0,0,++,0,++,++,0]] ?
yes
?-
@end smallexample 
@end enumerate 

@subsection total_charge(S,T) 
@code{T} is the sum of all load values in the surface @code{S}. 

It employs an auxiliary predicate that utilizes another predicate to calculate the sum of all loads within a horizontal line, with each recursive step contributing to the total sum.

@subsubsection Examples 
@enumerate  
@item Calculates total charge: 
@smallexample 

?- total_charge([[+,+++,0], 
              [+,+++,0], 
              [++,0,++], 
              [+,+++,0], 
              [++,0,++], 
              [+,+,++], 
              [+,++,0]], T).

T = s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(0))))))))))))))))))))))))))) ?  
yes
?-
@end smallexample 
@item Check with @code{basic_surface/1} given: 
@smallexample 

?- total_charge([[+++,+++++++,0,+], 
              [+++++++,+++,0,+,++++], 
              [+++,0], 
              [+++,+++++++,0], 
              [+++++++,0,+++,+,++++], 
              [+++], 
              [+++++++,+++,0]], T).
no
?-
@end smallexample 
@end enumerate 

@subsection average_charge(S,A) 
@code{A} is the average of all load valuesin the surface @code{S}.

This entails summing all the loads and dividing by the total number of cells. The result must be rounded by truncation,, i.e. returning the natural prior. For this purpose, the aforementioned predicate calculates the total sum of the load values, along with an auxiliary predicate that computes the total number of elements in the surface. Additionally, an integer division predicate is employed. 
@subsubsection Examples 
@enumerate  

@item Calculates average charge from example: 
@smallexample 

?- average_charge([[+++,+++++++,0,+,++++,0], 
              [+++++++,+++,0,+,++++,0], 
              [+++,0,+++++++,+,0,++++], 
              [+++,+++++++,0,++++,+,0], 
              [+++++++,0,+++,+,++++,0], 
              [+++,+++++++,+++,+,0,+], 
              [+++++++,+++,0,+,++++,0]], A).

A = s(s(0)) ? 
yes
?-
@end smallexample 

@item Surface given with wrong load values: 
@smallexample 

?- average_charge([[3,7,0,1,4,0], 
              [7,3,0,1,4,0], 
              [3,0,7,1,0,4], 
              [3,7,0,4,1,0], 
              [7,0,3,1,4,0], 
              [3,7,3,1,0,1], 
              [7,3,0,1,4,0]], A).

no
?-
@end smallexample 
@end enumerate

@section Usage and interface
@cartouche
@itemize @bullet
@item @b{Library usage:}

@code{:- use_module(/home/lumbalu/PROLOG/repo/PROLOG/Practica 1/code.pl).}
@item @b{Exports:}

@itemize @minus
@item @i{Predicates:}

@code{author_data/4}, @code{my_length/2}, @code{get/3}, @code{my_append/3}, @code{f/2}, @code{equal/2}, @code{my_plus/3}, @code{my_minus/3}, @code{my_less/2}, @code{div/3}, @code{surface_acc/2}, @code{h_line/3}, @code{v_line/3}, @code{v_lines/2}, @code{v_lines_aux/3}, @code{h_sum/2}, @code{total_charge/2}, @code{total_charge_aux/2}, @code{total_cells/2}, @code{average_charge/2}.
@item @i{Properties:}

@code{charge/1}, @code{my_list/1}, @code{nat_num/1}, @code{basic_surface/1}, @code{surface/1}.
@end itemize
@end itemize
@end cartouche
@section Documentation on exports
@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{author_data/4 (pred)}}}
@temp
@end iftex
@deffn PREDICATE author_data/4:
Defines authors in Deliverit system.
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{charge/1 (prop)}}}
@temp
@end iftex
@deffn PROPERTY charge/1:
Defines possible load values. 
 
It is defined as: 
@smallexample 
charge(+++++++).
charge(++++++).
charge(+++++).
charge(++++).
charge(+++).
charge(++).
charge(+).
charge(0).
@end smallexample

@b{Usage:} @code{charge(C)}

@code{C} is a load value
@itemize @minus
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{my_list/1 (prop)}}}
@temp
@end iftex
@deffn PROPERTY my_list/1:
Defines a list with load values. 

It is defined as: 
@smallexample 
my_list([H]) :-
    charge(H).
my_list([H|T]) :-
    charge(H),
    my_list(T).
@end smallexample 

The predicate @code{my_list/1} is called recursively, checking that all elements are charges and that it is a list structure. 

@b{Usage:} @code{my_list(L)}

@code{L} is a list with load values.
@itemize @minus
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{my_length/2 (pred)}}}
@temp
@end iftex
@deffn PREDICATE my_length/2:
Calculates the size of a list. It is defined by: 
@smallexample 
my_length([],0).
my_length([_1|T],s(N)) :-
    my_length(T,N).
@end smallexample

@b{Usage:} @code{my_length(L,N)}

@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{L} is a list with load values.
@iftex
@hfill
@end iftex
 (@code{my_list/1})

@code{N} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{get/3 (pred)}}}
@temp
@end iftex
@deffn PREDICATE get/3:
Extracts Nth element from a list. It is defined by: 
@smallexample 
get([Elem|_1],s(0),Elem).
get([_1|Rest],s(Index),Elem) :-
    get(Rest,Index,Elem).
@end smallexample

@b{Usage:} @code{get(L,I,E)}

@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{L} is a list with load values.
@iftex
@hfill
@end iftex
 (@code{my_list/1})

@code{I} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})

@code{E} is a load value
@iftex
@hfill
@end iftex
 (@code{charge/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{my_append/3 (pred)}}}
@temp
@end iftex
@deffn PREDICATE my_append/3:
Concatenate two lists. It is defined by: 
@smallexample 
my_append([],L,L).
my_append([X|Xs],Ys,[X|Zs]) :-
    my_append(Xs,Ys,Zs).
@end smallexample

@b{Usage:} @code{my_append(L1,L2,R)}

@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{L1} is a list with load values.
@iftex
@hfill
@end iftex
 (@code{my_list/1})

@code{L2} is a list with load values.
@iftex
@hfill
@end iftex
 (@code{my_list/1})

@code{R} is a list with load values.
@iftex
@hfill
@end iftex
 (@code{my_list/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{f/2 (pred)}}}
@temp
@end iftex
@deffn PREDICATE f/2:
Define equivalences between load values and natural numbers in Peano notation. In order to be able to perform arithmetic operations. 

It is defined by: 
@smallexample 
f(+++++++,s(s(s(s(s(s(s(0)))))))).
f(++++++,s(s(s(s(s(s(0))))))).
f(+++++,s(s(s(s(s(0)))))).
f(++++,s(s(s(s(0))))).
f(+++,s(s(s(0)))).
f(++,s(s(0))).
f(+,s(0)).
f(0,0).
f(s(s(s(s(s(s(s(0))))))),s(s(s(s(s(s(s(0)))))))).
f(s(s(s(s(s(s(0)))))),s(s(s(s(s(s(0))))))).
f(s(s(s(s(s(0))))),s(s(s(s(s(0)))))).
f(s(s(s(s(0)))),s(s(s(s(0))))).
f(s(s(s(0))),s(s(s(0)))).
f(s(s(0)),s(s(0))).
f(s(0),s(0)).
@end smallexample

@b{Usage 1:} @code{f(C,N)}

@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{C} is a load value
@iftex
@hfill
@end iftex
 (@code{charge/1})

@code{N} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})
@end itemize

@b{Usage 2:} @code{f(N1,N2)}

@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{N1} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})

@code{N2} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{nat_num/1 (prop)}}}
@temp
@end iftex
@deffn PROPERTY nat_num/1:
Defines natural numbers in Peano notation. 
 
It is defined as: 
@smallexample 
nat_num(0).
nat_num(s(X)) :-
    nat_num(X).
@end smallexample

@b{Usage:} @code{nat_num(X)}

@code{X} is a natural number.
@itemize @minus
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{equal/2 (pred)}}}
@temp
@end iftex
@deffn PREDICATE equal/2:
Defines equality operator @code{==} between two natural numbers in Peano notation. 

It is defined by: 
@smallexample 
equal(0,0).
equal(s(N),s(N)) :-
    nat_num(N),
    equal(N,N).
@end smallexample

@b{Usage:} @code{equal(N1,N2)}

@code{equal/2} will be true if both numbers are equal
@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{N1} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})

@code{N2} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{my_plus/3 (pred)}}}
@temp
@end iftex
@deffn PREDICATE my_plus/3:
Defines sum operator @code{+} between two natural numbers in Peano notation. 

It is defined by: 
@smallexample 
my_plus(0,Y,Y) :-
    nat_num(Y).
my_plus(s(X),Y,s(Z)) :-
    my_plus(X,Y,Z).
@end smallexample 

In case base, the sum of any number with 0, is the same number. The recursive call decrements the value of the first operand to 0, reaching case base, which assigns the second operand to the result and, when returning, increments the result as many times as recursive calls have been made. 

@b{Usage:} @code{my_plus(Op1,Op2,Res)}

@code{Res} is the sum of @code{Op1} and @code{Op2}
@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{Op2} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})

@code{Op1} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})

@code{Res} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{my_minus/3 (pred)}}}
@temp
@end iftex
@deffn PREDICATE my_minus/3:
Defines subtraction operator @code{-} between two natural numbers in Peano notation, using @code{my_plus/3}. 

It is defined by: 
@smallexample 
my_minus(X,Y,Z) :-
    my_plus(Z,Y,X).
@end smallexample

@b{Usage:} @code{my_minus(Op2,Op1,Res)}

@code{Res} is the difference between @code{Op2} and @code{Op1}
@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{Op2} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})

@code{Op1} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})

@code{Res} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{my_less/2 (pred)}}}
@temp
@end iftex
@deffn PREDICATE my_less/2:
Defines less than @code{>} operator between two natural numbers in Peano notation. 

It is defined by: 
@smallexample 
my_less(0,s(X)) :-
    nat_num(X).
my_less(s(X),s(Y)) :-
    my_less(X,Y).
@end smallexample

@b{Usage:} @code{my_less(N,M)}

@code{my_less/2} will be true if @code{N} my_less than @code{M}
@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{N} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})

@code{M} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{div/3 (pred)}}}
@temp
@end iftex
@deffn PREDICATE div/3:
Defines division @code{/} between two natural numbers in Peano notation. 

It is defined by: 
@smallexample 
div(0,_1,0).
div(X,Y,s(0)) :-
    my_minus(X,Y,Z),
    my_less(Z,Y).
div(X,Y,s(Q)) :-
    my_minus(X,Y,Z),
    div(Z,Y,Q).
@end smallexample 

Division is viewed as successive subtractions from the dividend until it becomes 0 or the remainder. 

@b{Usage:} @code{div(Dividend,Divisor,Quotient)}

@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{Dividend} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})

@code{Divisor} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})

@code{Quotient} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{basic_surface/1 (prop)}}}
@temp
@end iftex
@deffn PROPERTY basic_surface/1:
Defines a surface of load values. 

@cartouche  
@b{Note:} @code{basic_surface/1} must contains at least one non-empty horizontal line. 
@end cartouche 

It is defined as: 
@smallexample 
basic_surface([L]) :-
    my_list(L).
basic_surface([L|S2]) :-
    my_list(L),
    basic_surface(S2).
@end smallexample

@b{Usage:} @code{basic_surface(CellList)}

@code{CellList} is a list of lists with load cells.
@itemize @minus
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{surface/1 (prop)}}}
@temp
@end iftex
@deffn PROPERTY surface/1:
Defines a surface of load values, represented by a load value matrix. 

@cartouche  
@b{Note:} @code{surface/1} must contains at least one non-empty horizontal line. 
@end cartouche 

It is defined as: 
@smallexample 
surface([L|L2]) :-
    basic_surface([L|L2]),
    my_length(L,Tam),
    surface_acc([L|L2],Tam).
@end smallexample

@b{Usage:} @code{surface(CellMatrix)}

@code{CellMatrix} is a load value matrix.
@itemize @minus
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{surface_acc/2 (pred)}}}
@temp
@end iftex
@deffn PREDICATE surface_acc/2:
Checks length in all horizontal lines. 

It is defined by: 

@b{Usage:} @code{surface_acc(S,N)}

@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{S} is a load value matrix.
@iftex
@hfill
@end iftex
 (@code{surface/1})

@code{N} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{h_line/3 (pred)}}}
@temp
@end iftex
@deffn PREDICATE h_line/3:
Extracts Nth horizontal line from surface. 

It is defined by: 
@smallexample 
h_line([L],s(0),L).
h_line(S,N,C) :-
    get(S,N,C),
    surface(S).
@end smallexample

@b{Usage:} @code{h_line(S,N,R)}

@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{S} is a load value matrix.
@iftex
@hfill
@end iftex
 (@code{surface/1})

@code{N} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})

@code{R} is a list with load values.
@iftex
@hfill
@end iftex
 (@code{my_list/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{v_line/3 (pred)}}}
@temp
@end iftex
@deffn PREDICATE v_line/3:
Extracts Nth vertical line from surface. 

It is defined by: 
@smallexample 
v_line([Fila],Indice,[Elemento]) :-
    get(Fila,Indice,Elemento).
v_line([Fila|Filas],Indice,[Elemento|Columna]) :-
    get(Fila,Indice,Elemento),
    v_line(Filas,Indice,Columna).
@end smallexample

@b{Usage:} @code{v_line(S,N,C)}

@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{S} is a load value matrix.
@iftex
@hfill
@end iftex
 (@code{surface/1})

@code{N} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})

@code{C} is a list with load values.
@iftex
@hfill
@end iftex
 (@code{my_list/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{v_lines/2 (pred)}}}
@temp
@end iftex
@deffn PREDICATE v_lines/2:
Extracts all vertical lines from a surface. 

It is defined by: 
@smallexample 
v_lines([L],L).
v_lines([L|S2],C) :-
    my_length(L,Tam),
    v_lines_aux([L|S2],Tam,C).
@end smallexample

@b{Usage:} @code{v_lines(S,C)}

@itemize @minus
@item @i{The following properties should hold at call time:}

@code{S} is a load value matrix.
@iftex
@hfill
@end iftex
 (@code{surface/1})
@item @i{The following properties should hold upon exit:}

@code{C} is a load value matrix.
@iftex
@hfill
@end iftex
 (@code{surface/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{v_lines_aux/3 (pred)}}}
@temp
@end iftex
@deffn PREDICATE v_lines_aux/3:
@smallexample 
v_lines_aux(S,s(0),[C]) :-
    v_line(S,s(0),C).
v_lines_aux(S,s(Index),Resto) :-
    v_lines_aux(S,Index,NewResto),
    v_line(S,s(Index),Coln),
    my_append(NewResto,[Coln],Resto).
@end smallexample

@b{Usage:} @code{v_lines_aux(S,T,C)}

@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{S} is a load value matrix.
@iftex
@hfill
@end iftex
 (@code{surface/1})

@code{T} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})

@code{C} is a load value matrix.
@iftex
@hfill
@end iftex
 (@code{surface/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{h_sum/2 (pred)}}}
@temp
@end iftex
@deffn PREDICATE h_sum/2:
Sum elements of a horizontal line. 

It is defined by: 
@smallexample 
h_sum([C],N) :-
    f(C,N).
h_sum([H|T],Suma) :-
    h_sum(T,SumaResto),
    f(H,N),
    my_plus(N,SumaResto,Suma).
@end smallexample

@b{Usage:} @code{h_sum(R,T)}

@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{R} is a list with load values.
@iftex
@hfill
@end iftex
 (@code{my_list/1})

@code{T} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{total_charge/2 (pred)}}}
@temp
@end iftex
@deffn PREDICATE total_charge/2:
Sum all load values of a surface. 

It is defined by: 
@smallexample 
total_charge(S,T) :-
    total_charge_aux(S,T),
    surface(S).
@end smallexample

@b{Usage:} @code{total_charge(S,T)}

@code{T} is the sum of all elements in a surface.
@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{S} is a load value matrix.
@iftex
@hfill
@end iftex
 (@code{surface/1})

@code{T} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{total_charge_aux/2 (pred)}}}
@temp
@end iftex
@deffn PREDICATE total_charge_aux/2:
@smallexample 
total_charge_aux([],0).
total_charge_aux([L|S2],T) :-
    total_charge_aux(S2,SumaResto),
    h_sum(L,SumaFila),
    my_plus(SumaFila,SumaResto,T).
@end smallexample

@b{Usage:} @code{total_charge_aux(S,T)}

@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{S} is a load value matrix.
@iftex
@hfill
@end iftex
 (@code{surface/1})

@code{T} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{total_cells/2 (pred)}}}
@temp
@end iftex
@deffn PREDICATE total_cells/2:
Calculates the number of elements of a surface. 

It is defined by: 
@smallexample 
total_cells([L],N) :-
    my_length(L,N).
total_cells([L|S2],Total) :-
    total_cells(S2,TotalResto),
    my_length(L,Esta),
    my_plus(Esta,TotalResto,Total).
@end smallexample

@b{Usage:} @code{total_cells(S,N)}

@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{S} is a load value matrix.
@iftex
@hfill
@end iftex
 (@code{surface/1})

@code{N} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})
@end itemize
@end deffn
@sp 1

@iftex
@edef@temp{@noexpand@writetocentry{@realbackslash unnumbsubsubsecentry{average_charge/2 (pred)}}}
@temp
@end iftex
@deffn PREDICATE average_charge/2:
Calculates average load value from surface. 
 
It is defined by: 
@smallexample 
average_charge([[]],_1).
average_charge(S,A) :-
    total_charge(S,M),
    total_cells(S,T),
    div(M,T,A).
@end smallexample

@b{Usage:} @code{average_charge(S,A)}

@itemize @minus
@item @i{Call and exit should be compatible with:}

@code{S} is a load value matrix.
@iftex
@hfill
@end iftex
 (@code{surface/1})

@code{A} is a natural number.
@iftex
@hfill
@end iftex
 (@code{nat_num/1})
@end itemize
@end deffn
@sp 1

@section Documentation on imports
This module has the following direct dependencies:
@itemize @minus
@item @i{Internal (engine) modules:}

@code{term_basic}, @code{basiccontrol}, @code{basic_props}.
@item @i{Packages:}

@code{pure}, @code{initial}, @code{condcomp}, @code{assertions}, @code{assertions/assertions_basic}, @code{regtypes}.
@end itemize
