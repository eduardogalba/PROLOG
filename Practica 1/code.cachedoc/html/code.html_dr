section_env([file_top_section,pragmas([]),paper_opts(1,afourpaper),coversec([],[],[[string_esc("Eduardo Gil Alba, z170238")]],[],nop,nop,[]),level(0)],global_label("PROLOG: Practica 1"),[string_esc("PROLOG: Practica 1")],[show_toc(subparts),section_env([unnumbered,level(1),subfile(fulltoc),is_special(toc)],global_label("Table of Contents"),string_esc("Table of Contents"),[show_toc(full)]),[[],[],[section_env([with_parent,level(2)],local_label("Usage and interface"),string_esc("Usage and interface"),cartouche(itemize_env(bullet,[[item([]),bf([string_esc("Library usage"),string_esc(":")]),linebreak,tt(string_esc(":- use_module(/home/lumbalu/PROLOG/repo/PROLOG/Practica 1/code.pl)."))],[item([]),bf([string_esc("Exports"),string_esc(":")]),linebreak,itemize_env(minus,[[[item([]),em([string_esc("Predicates"),string_esc(":")]),linebreak,[[[idx_env(use,code,localnum_label("0"),string_esc("charge/1"),string_esc("charge/1")),string_esc(", ")],[idx_env(use,code,localnum_label("1"),string_esc("my_list/1"),string_esc("my_list/1")),string_esc(", ")],[idx_env(use,code,localnum_label("2"),string_esc("mylength/2"),string_esc("mylength/2")),string_esc(", ")],[idx_env(use,code,localnum_label("3"),string_esc("get/3"),string_esc("get/3")),string_esc(", ")],[idx_env(use,code,localnum_label("4"),string_esc("myappend/3"),string_esc("myappend/3")),string_esc(", ")],[idx_env(use,code,localnum_label("5"),string_esc("f/2"),string_esc("f/2")),string_esc(", ")],[idx_env(use,code,localnum_label("6"),string_esc("minus/3"),string_esc("minus/3")),string_esc(", ")],[idx_env(use,code,localnum_label("7"),string_esc("less/2"),string_esc("less/2")),string_esc(", ")],[idx_env(use,code,localnum_label("8"),string_esc("div/3"),string_esc("div/3")),string_esc(", ")],[idx_env(use,code,localnum_label("9"),string_esc("surface_acc/2"),string_esc("surface_acc/2")),string_esc(", ")],[idx_env(use,code,localnum_label("10"),string_esc("h_line/3"),string_esc("h_line/3")),string_esc(", ")],[idx_env(use,code,localnum_label("11"),string_esc("v_line/3"),string_esc("v_line/3")),string_esc(", ")],[idx_env(use,code,localnum_label("12"),string_esc("v_line_aux/3"),string_esc("v_line_aux/3")),string_esc(", ")],[idx_env(use,code,localnum_label("13"),string_esc("h_sum/2"),string_esc("h_sum/2")),string_esc(", ")],[idx_env(use,code,localnum_label("14"),string_esc("total_charge/2"),string_esc("total_charge/2")),string_esc(", ")],[idx_env(use,code,localnum_label("15"),string_esc("total_cells/2"),string_esc("total_cells/2")),string_esc(", ")],[idx_env(use,code,localnum_label("16"),string_esc("average/2"),string_esc("average/2")),string_esc(".")]],raw_nl]],nop,[item([]),em([string_esc("Properties"),string_esc(":")]),linebreak,[[[idx_env(use,code,localnum_label("17"),string_esc("author_data/4"),string_esc("author_data/4")),string_esc(", ")],[idx_env(use,code,localnum_label("18"),string_esc("igual/2"),string_esc("igual/2")),string_esc(", ")],[idx_env(use,code,localnum_label("19"),string_esc("plus/3"),string_esc("plus/3")),string_esc(", ")],[idx_env(use,code,localnum_label("20"),string_esc("basic_surface/1"),string_esc("basic_surface/1")),string_esc(", ")],[idx_env(use,code,localnum_label("21"),string_esc("surface/1"),string_esc("surface/1")),string_esc(".")]],raw_nl]],nop,nop,nop],nop])],nop,nop,nop,nop]))),[],[],section_env([with_parent,level(2)],local_label("Documentation on exports"),string_esc("Documentation on exports"),[[defpred(local_label("author_data/4"),prop,"PROPERTY",author_data/4,[],[[string_esc("Defines authors in Deliverit system. It is defined as: "),env_(verbatim,[raw_string("author_data(&apos;Gil&apos;,&apos;Alba&apos;,&apos;Eduardo&apos;,&apos;Z170238&apos;).
")])],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("author_data(Surname1,Surname2,Name,ID)")),string_esc([])],raw_nl],[var([string_esc("Surname1")]),string_esc(" "),string_esc("is your first surname."),p([]),var([string_esc("Surname2")]),string_esc(" "),string_esc("is your second surname."),p([]),var([string_esc("Name")]),string_esc(" "),string_esc("is your name."),p([]),var([string_esc("ID")]),string_esc(" "),string_esc("is university identifier.")],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("charge/1"),pred,"PREDICATE",charge/1,[],[[string_esc("Define los posibles valores constantes que contendrán las células cargadas. "),env_(verbatim,[raw_string("charge(+++++++).
charge(++++++).
charge(+++++).
charge(++++).
charge(+++).
charge(++).
charge(+).
charge(0).
")])],[[]]]),sp("1"),raw_nl],[defpred(local_label("my_list/1"),pred,"PREDICATE",my_list/1,[],[[string_esc("Define una lista según la representación interna "),tt([string_esc("[Head|Tail]")]),string_esc(" "),string_esc("en Prolog, que almacenará los valores de las células cargadas. "),env_(verbatim,[raw_string("my_list([H]) :-
    charge(H).
my_list([_H|T]) :-
    my_list(T).
")]),string_esc(" "),p([]),string_esc("El predicado "),idx_env(use,pred,localnum_label("22"),[string_esc("list/1")],[string_esc("list/1")]),string_esc(" "),string_esc("se llama de manera recursiva, comprobando que todos los elementos sean cargas y sea una estructura de lista. ")],[[]]]),sp("1"),raw_nl],[defpred(local_label("mylength/2"),pred,"PREDICATE",mylength/2,[],[string_esc("No further documentation available for this predicate."),[[]]]),sp("1"),raw_nl],[defpred(local_label("get/3"),pred,"PREDICATE",get/3,[],[string_esc("No further documentation available for this predicate."),[[]]]),sp("1"),raw_nl],[defpred(local_label("myappend/3"),pred,"PREDICATE",myappend/3,[],[string_esc("No further documentation available for this predicate."),[[]]]),sp("1"),raw_nl],[defpred(local_label("f/2"),pred,"PREDICATE",f/2,[],[string_esc("No further documentation available for this predicate."),[[]]]),sp("1"),raw_nl],[defpred(local_label("igual/2"),prop,"PROPERTY",igual/2,[],[[string_esc("Define la operación "),idx_env(use,op,localnum_label("23"),[string_esc("==")],[string_esc("==")]),string_esc(" "),string_esc("entre dos números naturales descritos en notación de Peano. "),env_(verbatim,[raw_string("igual(0,0).
igual(s(N),s(N)) :-
    igual(N,N).
")])],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("igual(N1,N2)")),string_esc([])],raw_nl],[var([string_esc("N1")]),string_esc(" "),string_esc("es un número natural."),p([]),var([string_esc("N2")]),string_esc(" "),string_esc("es un número natural. ")],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("plus/3"),prop,"PROPERTY",plus/3,[],[[string_esc("Define la operación "),idx_env(use,op,localnum_label("24"),[string_esc("+")],[string_esc("+")]),string_esc(" "),string_esc("entre dos números naturales descritos en notación de Peano. "),env_(verbatim,[raw_string("plus(0,Y,Y).
plus(s(X),Y,s(Z)) :-
    plus(X,Y,Z).
")]),string_esc(" "),p([]),string_esc("En el caso base, la suma de cualquier número con 0, es el mismo número. La llamada recursiva decrementa el valor del primer operando hasta ser 0, el caso base, que asigna el segundo operando al resultado y al regresar, incrementa el resultado tantas veces como llamadas recursivas se hayan realizado. ")],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("plus(Op1,Op2,Resultado)")),string_esc([])],raw_nl],[var([string_esc("Op1")]),string_esc(" "),string_esc("es un numero natural."),p([]),var([string_esc("Op2")]),string_esc(" "),string_esc("es un numero natural."),p([]),var([string_esc("Resultado")]),string_esc(" "),string_esc("es el resultado de la operación.")],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("minus/3"),pred,"PREDICATE",minus/3,[],[[string_esc("Define la operación "),idx_env(use,op,localnum_label("25"),[string_esc("-")],[string_esc("-")]),string_esc(" "),string_esc("entre dos números naturales descritos en notación de Peano, empleando el predicado de la suma "),idx_env(use,pred,localnum_label("26"),[string_esc("plus/3")],[string_esc("plus/3")]),string_esc(". "),env_(verbatim,[raw_string("minus(A,B,C) :-
    plus(C,B,A).
")])],[[]]]),sp("1"),raw_nl],[defpred(local_label("less/2"),pred,"PREDICATE",less/2,[],[[string_esc("Define la operación "),idx_env(use,op,localnum_label("27"),[string_esc(">")],[string_esc(">")]),string_esc(" "),string_esc("entre dos números naturales descritos en notación de Peano. "),env_(verbatim,[raw_string("less(0,s(_X)).
less(s(X),s(Y)) :-
    less(X,Y).
")])],[[]]]),sp("1"),raw_nl],[defpred(local_label("div/3"),pred,"PREDICATE",div/3,[],[[string_esc("Define la operación "),idx_env(use,op,localnum_label("28"),[string_esc("/")],[string_esc("/")]),string_esc(" "),string_esc("entre dos números naturales descritos en notación de Peano. "),env_(verbatim,[raw_string("div(X,Y,s(0)) :-
    minus(X,Y,Z),
    less(Z,Y).
div(X,Y,s(Q)) :-
    minus(X,Y,Z),
    div(Z,Y,Q).
")]),string_esc(" "),p([]),string_esc("Vista la división como sucesivas restas al dividiendo hasta ser 0 o el resto. ")],[[]]]),sp("1"),raw_nl],[defpred(local_label("basic_surface/1"),prop,"PROPERTY",basic_surface/1,[],[[string_esc("Define una superficie de celulas cargadas "),p([]),env_(note,[string_esc(" "),bf([string_esc("Note:")]),string_esc(" "),idx_env(use,pred,localnum_label("29"),[string_esc("basic_surface/1")],[string_esc("basic_surface/1")]),string_esc(" "),string_esc("debe contener al menos una lista con una célula. ")]),string_esc(" "),env_(verbatim,[raw_string("basic_surface([[H|T]]) :-
    charge(H),
    my_list(T).
basic_surface([_L|S2]) :-
    basic_surface(S2).
")])],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("basic_surface(CellList)")),string_esc([])],raw_nl],[var([string_esc("CellList")]),string_esc(" "),string_esc("is a list with charged cells.")],assrtprops([],[],[],[]))],[[[],[]],[]],[[raw_nl,bf(string_esc("Other properties:")),string_esc(" "),linebreak],[defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("basic_surface(X)")),string_esc([])],raw_nl],[string_esc("Cannot be a list with a empty sublist")],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("30"),string_esc("X=[[]]"),string_esc("X=[[]]"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("31"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[string_esc("Calls of the form "),var([string_esc("X")]),string_esc(" "),string_esc("fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("32"),string_esc("fails/1"),string_esc("fails/1"))],string_esc(")")]])]],raw_nl],[]))]]]]),sp("1"),raw_nl],[defpred(local_label("surface/1"),prop,"PROPERTY",surface/1,[],[[string_esc("Defines a surface of charged cells, represented by a list of lists with same number of cells. It is defined as: "),env_(verbatim,[raw_string("surface([L|L2]) :-
    basic_surface([L|L2]),
    mylength(L,Tam),
    surface_acc([L|L2],Tam).
")])],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("surface(CellList)")),string_esc([])],raw_nl],[var([string_esc("CellList")]),string_esc(" "),string_esc("is a list with charged cells.")],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("surface_acc/2"),pred,"PREDICATE",surface_acc/2,[],[string_esc("No further documentation available for this predicate."),[[]]]),sp("1"),raw_nl],[defpred(local_label("h_line/3"),pred,"PREDICATE",h_line/3,[],[string_esc("No further documentation available for this predicate."),[[]]]),sp("1"),raw_nl],[defpred(local_label("v_line/3"),pred,"PREDICATE",v_line/3,[],[string_esc("No further documentation available for this predicate."),[[]]]),sp("1"),raw_nl],[defpred(local_label("v_line_aux/3"),pred,"PREDICATE",v_line_aux/3,[],[string_esc("No further documentation available for this predicate."),[[]]]),sp("1"),raw_nl],[defpred(local_label("h_sum/2"),pred,"PREDICATE",h_sum/2,[],[string_esc("No further documentation available for this predicate."),[[]]]),sp("1"),raw_nl],[defpred(local_label("total_charge/2"),pred,"PREDICATE",total_charge/2,[],[string_esc("No further documentation available for this predicate."),[[]]]),sp("1"),raw_nl],[defpred(local_label("total_cells/2"),pred,"PREDICATE",total_cells/2,[],[string_esc("No further documentation available for this predicate."),[[]]]),sp("1"),raw_nl],[defpred(local_label("average/2"),pred,"PREDICATE",average/2,[],[string_esc("No further documentation available for this predicate."),[[]]]),sp("1"),raw_nl]]),[],[],section_env([with_parent,level(2)],local_label("Documentation on imports"),string_esc("Documentation on imports"),[string_esc("This module has the following direct dependencies:"),itemize_env(minus,[nop,nop,nop,[item([]),em([string_esc("Internal (engine) modules"),string_esc(":")]),linebreak,[[[idx_env(use,code,localnum_label("33"),string_esc("term_basic"),string_esc("term_basic")),string_esc(", ")],[idx_env(use,code,localnum_label("34"),string_esc("arithmetic"),string_esc("arithmetic")),string_esc(", ")],[idx_env(use,code,localnum_label("35"),string_esc("atomic_basic"),string_esc("atomic_basic")),string_esc(", ")],[idx_env(use,code,localnum_label("36"),string_esc("basiccontrol"),string_esc("basiccontrol")),string_esc(", ")],[idx_env(use,code,localnum_label("37"),string_esc("exceptions"),string_esc("exceptions")),string_esc(", ")],[idx_env(use,code,localnum_label("38"),string_esc("term_compare"),string_esc("term_compare")),string_esc(", ")],[idx_env(use,code,localnum_label("39"),string_esc("term_typing"),string_esc("term_typing")),string_esc(", ")],[idx_env(use,code,localnum_label("40"),string_esc("debugger_support"),string_esc("debugger_support")),string_esc(", ")],[idx_env(use,code,localnum_label("41"),string_esc("basic_props"),string_esc("basic_props")),string_esc(".")]],raw_nl]],[item([]),em([string_esc("Packages"),string_esc(":")]),linebreak,[[[idx_env(use,code,localnum_label("42"),string_esc("prelude"),string_esc("prelude")),string_esc(", ")],[idx_env(use,code,localnum_label("43"),string_esc("initial"),string_esc("initial")),string_esc(", ")],[idx_env(use,code,localnum_label("44"),string_esc("condcomp"),string_esc("condcomp")),string_esc(", ")],[idx_env(use,code,localnum_label("45"),string_esc("assertions"),string_esc("assertions")),string_esc(", ")],[idx_env(use,code,localnum_label("46"),string_esc("assertions/assertions_basic"),string_esc("assertions/assertions_basic")),string_esc(", ")],[idx_env(use,code,localnum_label("47"),string_esc("regtypes"),string_esc("regtypes")),string_esc(".")]],raw_nl]]])])]],section_env([unnumbered,level(1),subfile(search),is_special(search)],global_label("Search this manual"),string_esc("Search this manual"),[[raw_nl,[string_esc("Type below to search for where concepts, predicates,
 modes, properties, types, applications, authors, etc., are defined or
 referred to in this manual. Use "),tt(string_esc("_")),string_esc(" to show all entries in the index.")],linebreak],linebreak,htmlenv(input,[type="text",id="search-input"],[]),htmlenv(div,[id="search-results"],[]),htmlenv(div,[id="search-index",style="display:none"],[show_index(global)])])]).